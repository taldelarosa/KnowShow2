using System.ComponentModel.DataAnnotations;

namespace EpisodeIdentifier.Core.Models.Configuration;

/// <summary>
/// Entity representing the result of fuzzy hash computation and comparison operations.
/// Contains hash values, similarity metrics, and comparison metadata.
/// </summary>
public class FuzzyHashResult
{
    /// <summary>
    /// The computed fuzzy hash value (CTPH signature).
    /// Generated by ssdeep algorithm for the processed content.
    /// </summary>
    [Required]
    public string HashValue { get; set; } = string.Empty;

    /// <summary>
    /// Similarity score compared to a reference hash (0-100).
    /// Only populated when this result represents a comparison operation.
    /// 0 = no similarity, 100 = identical content.
    /// </summary>
    [Range(0, 100)]
    public int SimilarityScore { get; set; }

    /// <summary>
    /// Absolute file path of the content that was hashed.
    /// Used for tracking and debugging hash operations.
    /// </summary>
    public string? SourceFilePath { get; set; }

    /// <summary>
    /// Size in bytes of the content that was hashed.
    /// Used for performance analysis and hash validation.
    /// </summary>
    [Range(0, long.MaxValue)]
    public long ContentSize { get; set; }

    /// <summary>
    /// Timestamp when this hash was computed.
    /// Used for cache invalidation and performance tracking.
    /// </summary>
    public DateTime ComputedAt { get; set; } = DateTime.UtcNow;

    /// <summary>
    /// Reference hash value used for comparison operations.
    /// Only populated when this result represents a similarity comparison.
    /// </summary>
    public string? ReferenceHashValue { get; set; }

    /// <summary>
    /// Additional metadata about the hashing operation.
    /// Used for debugging and performance analysis.
    /// </summary>
    public Dictionary<string, object> Metadata { get; set; } = new();

    /// <summary>
    /// Indicates if this result represents a successful hash computation.
    /// False indicates an error occurred during hashing.
    /// </summary>
    public bool IsValid { get; set; } = true;

    /// <summary>
    /// Error message if hash computation failed.
    /// Only populated when IsValid is false.
    /// </summary>
    public string? ErrorMessage { get; set; }

    /// <summary>
    /// Creates a successful hash computation result.
    /// </summary>
    /// <param name="hashValue">The computed CTPH hash value.</param>
    /// <param name="sourceFilePath">Path to the source file that was hashed.</param>
    /// <param name="contentSize">Size in bytes of the hashed content.</param>
    /// <returns>FuzzyHashResult representing successful computation.</returns>
    public static FuzzyHashResult Success(
        string hashValue,
        string? sourceFilePath = null,
        long contentSize = 0)
    {
        return new FuzzyHashResult
        {
            HashValue = hashValue,
            SourceFilePath = sourceFilePath,
            ContentSize = contentSize,
            IsValid = true,
            ComputedAt = DateTime.UtcNow
        };
    }

    /// <summary>
    /// Creates a successful hash comparison result.
    /// </summary>
    /// <param name="hashValue">The primary hash value.</param>
    /// <param name="referenceHashValue">The reference hash for comparison.</param>
    /// <param name="similarityScore">The computed similarity score (0-100).</param>
    /// <param name="sourceFilePath">Path to the source file that was hashed.</param>
    /// <param name="contentSize">Size in bytes of the hashed content.</param>
    /// <returns>FuzzyHashResult representing successful comparison.</returns>
    public static FuzzyHashResult Comparison(
        string hashValue,
        string referenceHashValue,
        int similarityScore,
        string? sourceFilePath = null,
        long contentSize = 0)
    {
        return new FuzzyHashResult
        {
            HashValue = hashValue,
            ReferenceHashValue = referenceHashValue,
            SimilarityScore = similarityScore,
            SourceFilePath = sourceFilePath,
            ContentSize = contentSize,
            IsValid = true,
            ComputedAt = DateTime.UtcNow
        };
    }

    /// <summary>
    /// Creates a failed hash computation result.
    /// </summary>
    /// <param name="errorMessage">Description of the error that occurred.</param>
    /// <param name="sourceFilePath">Path to the source file that failed to hash.</param>
    /// <returns>FuzzyHashResult representing failed computation.</returns>
    public static FuzzyHashResult Failure(string errorMessage, string? sourceFilePath = null)
    {
        return new FuzzyHashResult
        {
            IsValid = false,
            ErrorMessage = errorMessage,
            SourceFilePath = sourceFilePath,
            ComputedAt = DateTime.UtcNow
        };
    }

    /// <summary>
    /// Determines if this result represents a comparison operation.
    /// </summary>
    /// <returns>True if ReferenceHashValue is set, indicating comparison was performed.</returns>
    public bool IsComparisonResult()
    {
        return !string.IsNullOrEmpty(ReferenceHashValue);
    }

    /// <summary>
    /// Determines if the similarity score meets the specified threshold.
    /// Only applicable for comparison results.
    /// </summary>
    /// <param name="threshold">The minimum similarity threshold (0-100).</param>
    /// <returns>True if similarity score meets or exceeds threshold.</returns>
    public bool MeetsThreshold(int threshold)
    {
        if (!IsValid || !IsComparisonResult())
            return false;

        return SimilarityScore >= threshold;
    }

    /// <summary>
    /// Gets a human-readable summary of this hash result.
    /// Used for logging and debugging purposes.
    /// </summary>
    /// <returns>Formatted string describing the hash result.</returns>
    public string GetSummary()
    {
        if (!IsValid)
        {
            return $"Hash computation failed: {ErrorMessage ?? "Unknown error"}";
        }

        var summary = $"Hash: {HashValue[..Math.Min(16, HashValue.Length)]}...";

        if (!string.IsNullOrEmpty(SourceFilePath))
        {
            var fileName = Path.GetFileName(SourceFilePath);
            summary += $" (File: {fileName})";
        }

        if (ContentSize > 0)
        {
            summary += $" (Size: {ContentSize:N0} bytes)";
        }

        if (IsComparisonResult())
        {
            summary += $" (Similarity: {SimilarityScore}%)";
        }

        return summary;
    }

    /// <summary>
    /// Adds metadata key-value pair to this result.
    /// </summary>
    /// <param name="key">Metadata key.</param>
    /// <param name="value">Metadata value.</param>
    public void AddMetadata(string key, object value)
    {
        Metadata[key] = value;
    }

    /// <summary>
    /// Gets metadata value by key with type casting.
    /// </summary>
    /// <typeparam name="T">Expected type of the metadata value.</typeparam>
    /// <param name="key">Metadata key.</param>
    /// <returns>Metadata value cast to specified type, or default if not found.</returns>
    public T? GetMetadata<T>(string key)
    {
        if (Metadata.TryGetValue(key, out var value) && value is T typedValue)
        {
            return typedValue;
        }
        return default;
    }

    /// <summary>
    /// Creates a copy of this result with updated similarity information.
    /// Used when performing additional comparisons with the same base hash.
    /// </summary>
    /// <param name="referenceHashValue">New reference hash for comparison.</param>
    /// <param name="similarityScore">New similarity score.</param>
    /// <returns>New FuzzyHashResult with updated comparison data.</returns>
    public FuzzyHashResult WithComparison(string referenceHashValue, int similarityScore)
    {
        return new FuzzyHashResult
        {
            HashValue = HashValue,
            ReferenceHashValue = referenceHashValue,
            SimilarityScore = similarityScore,
            SourceFilePath = SourceFilePath,
            ContentSize = ContentSize,
            ComputedAt = ComputedAt,
            IsValid = IsValid,
            ErrorMessage = ErrorMessage,
            Metadata = new Dictionary<string, object>(Metadata)
        };
    }

    /// <summary>
    /// Validates the internal state of this hash result.
    /// </summary>
    /// <returns>List of validation errors, empty if valid.</returns>
    public List<string> ValidateState()
    {
        var errors = new List<string>();

        if (IsValid)
        {
            if (string.IsNullOrWhiteSpace(HashValue))
            {
                errors.Add("HashValue is required for valid results");
            }

            if (IsComparisonResult())
            {
                if (string.IsNullOrWhiteSpace(ReferenceHashValue))
                {
                    errors.Add("ReferenceHashValue is required for comparison results");
                }

                if (SimilarityScore < 0 || SimilarityScore > 100)
                {
                    errors.Add("SimilarityScore must be between 0 and 100");
                }
            }

            if (ContentSize < 0)
            {
                errors.Add("ContentSize cannot be negative");
            }
        }
        else
        {
            if (string.IsNullOrWhiteSpace(ErrorMessage))
            {
                errors.Add("ErrorMessage is required for invalid results");
            }
        }

        return errors;
    }
}