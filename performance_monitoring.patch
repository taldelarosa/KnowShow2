--- a/src/EpisodeIdentifier.Core/Services/EmbeddingService.cs
+++ b/src/EpisodeIdentifier.Core/Services/EmbeddingService.cs
@@ -1,6 +1,7 @@
 using EpisodeIdentifier.Core.Interfaces;
 using EpisodeIdentifier.Core.Models;
 using Microsoft.Extensions.Logging;
+using System.Diagnostics;
 using Microsoft.ML.OnnxRuntime;
 using Microsoft.ML.OnnxRuntime.Tensors;
 using Microsoft.ML.Tokenizers;
@@ -28,6 +29,7 @@ public class EmbeddingService : IEmbeddingService, IDisposable
     public float[] GenerateEmbedding(string cleanText)
     {
         EnsureModelInitialized();
+        var stopwatch = Stopwatch.StartNew();
 
         _logger.LogDebug("Generating embedding for text ({Length} chars)", cleanText.Length);
 
@@ -88,6 +90,11 @@ public class EmbeddingService : IEmbeddingService, IDisposable
             // Apply mean pooling to get sentence embedding
             var embedding = ApplyMeanPooling(output, inputIds.Length, attentionMask);
 
+            stopwatch.Stop();
+            _logger.LogInformation(
+                "Generated {Dimensions}-dim embedding in {ElapsedMs}ms (throughput: {CharsPerSec:F1} chars/sec)", 
+                embedding.Length, stopwatch.ElapsedMilliseconds, cleanText.Length * 1000.0 / Math.Max(1, stopwatch.ElapsedMilliseconds));
+
             _logger.LogDebug("Generated embedding: {Dimensions} dimensions", embedding.Length);
             return embedding;
         }
@@ -117,6 +124,7 @@ public class EmbeddingService : IEmbeddingService, IDisposable
         }
 
         _logger.LogInformation("Batch generating embeddings for {Count} texts", cleanTexts.Count);
+        var batchStopwatch = Stopwatch.StartNew();
 
         var embeddings = new List<float[]>();
         
@@ -127,6 +135,10 @@ public class EmbeddingService : IEmbeddingService, IDisposable
             embeddings.Add(GenerateEmbedding(text));
         }
 
+        batchStopwatch.Stop();
+        _logger.LogInformation(
+            "Batch generated {Count} embeddings in {ElapsedMs}ms (avg: {AvgMs:F1}ms per embedding)", 
+            embeddings.Count, batchStopwatch.ElapsedMilliseconds, batchStopwatch.ElapsedMilliseconds / (double)Math.Max(1, embeddings.Count));
         return embeddings;
     }
 
--- a/src/EpisodeIdentifier.Core/Services/VectorSearchService.cs
+++ b/src/EpisodeIdentifier.Core/Services/VectorSearchService.cs
@@ -1,4 +1,5 @@
 using System.Data;
+using System.Diagnostics;
 using EpisodeIdentifier.Core.Interfaces;
 using EpisodeIdentifier.Core.Models;
 using Microsoft.Data.Sqlite;
@@ -48,6 +49,8 @@ public class VectorSearchService : IVectorSearchService
 
         _logger.LogDebug("Searching for top {TopK} similar subtitles (minSimilarity: {MinSimilarity})", 
             topK, minSimilarity);
+        
+        var stopwatch = Stopwatch.StartNew();
 
         var results = new List<VectorSimilarityResult>();
 
@@ -112,6 +115,11 @@ public class VectorSearchService : IVectorSearchService
                 }
             }
 
+            stopwatch.Stop();
+            _logger.LogInformation(
+                "Vector search completed in {ElapsedMs}ms ({ResultCount} results, throughput: {QueriesPerSec:F1} queries/sec)", 
+                stopwatch.ElapsedMilliseconds, results.Count, 1000.0 / Math.Max(1, stopwatch.ElapsedMilliseconds));
+
             return results;
         }
         catch (Exception ex)
