using System;
using System.IO;
using System.Threading.Tasks;

namespace EpisodeIdentifier.Tests.Integration;

public class EndToEndIdentificationTests : IDisposable
{
    private readonly ServiceProvider _serviceProvider;
    private readonly SubtitleWorkflowCoordinator _coordinator;
    private readonly string _testDataPath;

    public EndToEndIdentificationTests()
    {
        // Setup test services
        var services = new ServiceCollection();
        
        // Add logging
        services.AddLogging(builder => builder.AddConsole());
        
        // Add core services
        services.AddTransient<VideoFormatValidator>();
        services.AddTransient<SubtitleExtractor>();
        services.AddTransient<ITextSubtitleExtractor, SimpleTextSubtitleExtractor>();
        services.AddTransient<EnhancedPgsToTextConverter>();
        services.AddTransient<PgsToTextConverter>();
        services.AddTransient<SubtitleMatcher>();
        services.AddTransient<FuzzyHashService>();
        services.AddTransient<SubtitleWorkflowCoordinator>();
        
        _serviceProvider = services.BuildServiceProvider();
        _coordinator = _serviceProvider.GetRequiredService<SubtitleWorkflowCoordinator>();
        
        // Setup test data path
        _testDataPath = Path.Combine(Path.GetTempPath(), "EpisodeIdentifierTests");
        Directory.CreateDirectory(_testDataPath);
    }

    [Fact]
    public async Task ProcessVideo_WithTextSubtitles_IdentifiesCorrectly()
    {
        // Arrange
        var testVideoPath = "/mnt/c/src/KnowShow/TestData/media/Episode S02E01.mkv";
        
        // Skip test if file doesn't exist
        if (!File.Exists(testVideoPath))
        {
            // Create a minimal test that validates the service setup
            var result = await _coordinator.ProcessVideoAsync("nonexistent.mkv");
            result.Should().NotBeNull();
            result.HasError.Should().BeTrue();
            return;
        }

        // Act
        var identificationResult = await _coordinator.ProcessVideoAsync(testVideoPath);

        // Assert
        identificationResult.Should().NotBeNull();
        
        if (!identificationResult.HasError)
        {
            identificationResult.Series.Should().NotBeNullOrEmpty();
            identificationResult.Season.Should().BeGreaterThan(0);
            identificationResult.Episode.Should().BeGreaterThan(0);
            identificationResult.Confidence.Should().BeGreaterThan(0.5);
        }
        else
        {
            // Log the error for debugging
            Console.WriteLine($"Identification failed: {identificationResult.Error?.Message}");
        }
    }

    [Fact]
    public async Task ProcessVideo_WithNonexistentFile_ReturnsError()
    {
        // Arrange
        var nonexistentPath = Path.Combine(_testDataPath, "nonexistent.mkv");

        // Act
        var result = await _coordinator.ProcessVideoAsync(nonexistentPath);

        // Assert
        result.Should().NotBeNull();
        result.HasError.Should().BeTrue();
        result.Error.Should().NotBeNull();
    }

    [Fact]
    public async Task ProcessVideo_WithEmptyFilePath_ReturnsError()
    {
        // Act
        var result = await _coordinator.ProcessVideoAsync("");

        // Assert
        result.Should().NotBeNull();
        result.HasError.Should().BeTrue();
        result.Error.Should().NotBeNull();
    }

    [Fact]
    public async Task ProcessVideo_WithLanguagePreference_UsesCorrectLanguage()
    {
        // Arrange
        var testVideoPath = "/mnt/c/src/KnowShow/TestData/media/Episode S02E01.mkv";
        var preferredLanguage = "eng";
        
        // Skip test if file doesn't exist
        if (!File.Exists(testVideoPath))
        {
            var result = await _coordinator.ProcessVideoAsync("nonexistent.mkv", preferredLanguage);
            result.Should().NotBeNull();
            result.HasError.Should().BeTrue();
            return;
        }

        // Act
        var identificationResult = await _coordinator.ProcessVideoAsync(testVideoPath, preferredLanguage);

        // Assert
        identificationResult.Should().NotBeNull();
        // The method should not throw even with language preference
    }

    public void Dispose()
    {
        _serviceProvider?.Dispose();
        
        // Cleanup test data
        if (Directory.Exists(_testDataPath))
        {
            try
            {
                Directory.Delete(_testDataPath, true);
            }
            catch
            {
                // Ignore cleanup errors
            }
        }
    }
}
